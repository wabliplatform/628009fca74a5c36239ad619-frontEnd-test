/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Metric from '../model/Metric';

/**
* Metric service.
* @module api/MetricApi
* @version 1.0.0
*/
export default class MetricApi {

    /**
    * Constructs a new MetricApi. 
    * @alias module:api/MetricApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createmetric operation.
     * @callback module:api/MetricApi~createmetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Metric} metric data to be created
     * @param {module:api/MetricApi~createmetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    createmetric(metric, callback) {
      let postBody = metric;
      // verify the required parameter 'metric' is set
      if (metric === undefined || metric === null) {
        throw new Error("Missing the required parameter 'metric' when calling createmetric");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metric;
      return this.apiClient.callApi(
        '/metric', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletemetric operation.
     * @callback module:api/MetricApi~deletemetricCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} metricId the Id parameter
     * @param {module:api/MetricApi~deletemetricCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletemetric(metricId, callback) {
      let postBody = null;
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling deletemetric");
      }

      let pathParams = {
        'metricId': metricId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/metric/{metricId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllmetric operation.
     * @callback module:api/MetricApi~getAllmetricCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metric>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/MetricApi~getAllmetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Metric>}
     */
    getAllmetric(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Metric];
      return this.apiClient.callApi(
        '/metric/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getmetric operation.
     * @callback module:api/MetricApi~getmetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} metricId the Id parameter
     * @param {module:api/MetricApi~getmetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    getmetric(metricId, callback) {
      let postBody = null;
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling getmetric");
      }

      let pathParams = {
        'metricId': metricId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metric;
      return this.apiClient.callApi(
        '/metric/{metricId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatemetric operation.
     * @callback module:api/MetricApi~updatemetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} metricId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Metric} opts.metric data to be updated
     * @param {module:api/MetricApi~updatemetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    updatemetric(metricId, opts, callback) {
      opts = opts || {};
      let postBody = opts['metric'];
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling updatemetric");
      }

      let pathParams = {
        'metricId': metricId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metric;
      return this.apiClient.callApi(
        '/metric/{metricId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
